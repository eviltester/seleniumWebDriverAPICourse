<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.seleniumsimplified.webdriver</groupId>
    <artifactId>webdriverbasics</artifactId>
    <version>3.5.3</version>
    <packaging>jar</packaging>

    <name>webDriverbasics</name>
    <url>http://seleniumsimplified.com</url>


    <!-- if you encounter issues using Firefox then please read the Firefox47.pdf in \docs -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- <webdriver.version>2.53.1</webdriver.version> -->
        <!-- AllBrowserTests: webdriver 3.3.1 Chromedriver 2.32 and Chrome 61.0.3163.100 - clean run -->
        <!-- AllBrowserTests: webdriver 3.5.3 Chromedriver 2.32 and Chrome 61.0.3163.100 - clean run -->
        <!-- 20190613 <webdriver.version>3.12.0</webdriver.version> all tests Version 75.0.3770.80 ChromeDriver 75.0.3770.8 -->


        <!-- 20190613 3.141.59 needed some changes to code but AllBrowserTests run

            slowloadable component page did not compile needed to change

            package com.seleniumsimplified.webdriver.pageobjects.slowloadablecomponent.pages;
            ProcessedFormPage

            constructor to
            ~~~~~~~~
            public ProcessedFormPage(WebDriver aDriver) {
                super(Clock.systemDefaultZone(), 10);
                driver = aDriver;
            }
            ~~~~~~~~

            This change was introduced in version 3.14.0

            Also we now use options instead of capabilities to instantiate drivers e.g.

            e.g. instead of

~~~~~~~~
            Proxy proxy = new Proxy().setHttpProxy(Driver.PROXY); // e.g. "localhost:8888"
            DesiredCapabilities capabilities = new DesiredCapabilities();
            capabilities.setCapability(CapabilityType.PROXY, proxy);
            WebDriver driver = new EdgeDriver(capabilities);

~~~~~~~~

We use

~~~~~~~~
            Proxy proxy = new Proxy().setHttpProxy(Driver.PROXY); // e.g. "localhost:8888"
            WebDriver driver = new EdgeDriver(new EdgeOptions().setProxy(proxy));
~~~~~~~~


        For version 4 it is important to depend on selenium-java not selenium server

        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${webdriver.version}</version>
        </dependency>

        e.g. in v3 we could also use

        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-server</artifactId>
            <version>${webdriver.version}</version>
        </dependency>

         -->
        <webdriver.version>3.141.59</webdriver.version>

        <!--
         Selenium 4 currently doesn't support Actions and the Select support class doesn't
         compile for me so can't really test course code against this yet
         -->
        <!--<webdriver.version>4.0.0-alpha-3</webdriver.version>-->
        <htmlunitdriver.version>2.36.0</htmlunitdriver.version>

        <junit.version>4.13</junit.version>
        <!-- or use junit 5 in backwards compatibility mode-->
        <!--
        <junit.jupiter.version>5.6.2</junit.jupiter.version>
        -->
        <hamcrest.version>1.3</hamcrest.version>


    </properties>


    <dependencies>



     <!-- Full access to hamcrest matchers

     JUnit 4.12 automatically adds hamcrest-core
     or you can add hamcrest-all for everything if you don't want to think about it
    -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>${hamcrest.version}</version>
        </dependency>


        <!--
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
        </dependency>
        -->

        <!-- JUnit 5 -->
        <!--
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        -->

        <!-- bring in the full selenium deploy
     we could be more selective and bring
     only what we need -->

        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${webdriver.version}</version>
        </dependency>

<!--

        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${webdriver.version}</version>
        </dependency>
-->




        <!-- from WebDriver 2.53.0 HTMLUnit is no longer distributed with Selenium WebDriver -->
        <!-- https://github.com/SeleniumHQ/htmlunit-driver -->
        <!-- need to bring in the htmlunit driver on its own -->
        <!-- https://github.com/SeleniumHQ/selenium/blob/master/java/CHANGELOG -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>htmlunit-driver</artifactId>
            <version>${htmlunitdriver.version}</version>
        </dependency>

    </dependencies>

    <!-- I have added the build section to support importing into
	     IntelliJ automatically without throwing errors about wrong Java
		 Version. This basically says the source requires at least Java 1.8
		 and use a compiler that outputs Java 1.8

         Selenium WebDriver 3 will require Java 1.8 so I have increased the
         numbers in preparation, which means you need to install a JDK 1.8 (minimum)

		 You can use 1.7 or 1.6 for Selenium WebDriver 2.53.1 and below
    -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
					<target>1.8</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- examples of how to use the profiles from the command line -->
    <!-- mvn test
                will run the anyBrowserTests profile -->
    <!-- mvn test -PanyBrowserTests
                will run the anyBrowserTests profile -->
    <!-- mvn test -Dselenium2basics.webdriver=CHROME
                will run the anyBrowserTests using CHROME -->
    <!-- mvn test -PchromeTests -Dselenium2basics.webdriver=CHROME
                will run the tests that should pass on CHROME using CHROME -->
    <!-- mvn test -Dselenium2basics.webdriver=GRID -DWEBDRIVER_GRID_URL=http://id@ondemand.saucelabs.com:80/wd/hub -DWEBDRIVER_GRID_BROWSER=firefox -DWEBDRIVER_GRID_BROWSER_VERSION=39.0 -DWEBDRIVER_GRID_BROWSER_PLATFORM="Windows 7"
                will use saucelabs to run the tests on firefox
    -->

    <!-- we can also run any of the suites from the command line -->
    <!-- mvn test -Dtest=AllBrowserSuite
            would run the AllBrowserSuite on the default browser FIREFOX -->
    <!-- mvn test -Dtest=EmptySuite
        would run the EmptySuite - which has no tests! -->
    <!-- mvn test -Dtest=MarionetteSuite -Dselenium2basics.webdriver=FIREFOXMARIONETTE
        would run the passing marionette tests on the Marionette Driver with Firefox -->

    <profiles>
        <profile>
            <id>anyBrowserTests</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.14.1</version>
                        <configuration>
                            <includes>
                                <include>**/AllBrowserSuite.class</include>
                            </includes>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
